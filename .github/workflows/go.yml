# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    name: Build app
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod

      - name: Create Vendor Folder
        run: go mod vendor

      - name: Build
        run: go build -v ./...

      - name: Empacotamento dos arquivos
        uses: thedoctor0/zip-release@master
        with:
          filename: 'veracode.zip'
          path: .
          
      - name: Publicando Artefato
        uses: actions/upload-artifact@v2
        with:
          name: pacoteVeracode
          path: veracode.zip

  Veracode_IaC:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Veracode IaC
        env:
          VERACODE_API_KEY_ID: ${{ secrets.VeracodeID }} # Lembrar de criar as credenciais no Secrets
          VERACODE_API_KEY_SECRET: ${{ secrets.VeracodeKey }}
        run: |
          curl -fsS https://tools.veracode.com/veracode-cli/install | sh
          ./veracode scan --source ${{ secrets.ContainerImage }} --type image --format table

  Veracode_UploadAndScan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Artefato
        uses: actions/download-artifact@v2
        with:
          name: pacoteVeracode
      - name: UploadAndScan
        uses: veracode/veracode-uploadandscan-action@master # Faz a analise da Veracode
        env:
          VeracodeID: ${{ secrets.VeracodeID }} # Lembrar de criar as credenciais no Secrets
          VeracodeKey: ${{ secrets.VeracodeKey }}
          AppName: ${{ github.repository }}
        with:
          vid: '$VeracodeID'
          vkey: '$VeracodeKey'
          criticality: 'VeryHigh'
          appname: '$AppName'
          filepath: 'veracode.zip'
          scanallnonfataltoplevelmodules: true
          includenewmodules: true
          version: ${{ github.run_id }}

  Veracode_PipelineScan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Artefato
        uses: actions/download-artifact@v2
        with:
          name: pacoteVeracode
      - name: Veracode Pipeline Scan
        env:
          VID: ${{ secrets.VeracodeID }} # Lembrar de criar as credenciais no Secrets
          VKEY: ${{ secrets.VeracodeKey }}
          CaminhoArquivo: './veracode.zip'
        run: |
          curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
          unzip pipeline-scan-LATEST.zip
          java -jar pipeline-scan.jar -vid $VID -vkey $VKEY -f $CaminhoArquivo --issue_details true

  push_to_registry:
    name: Push Docker image to Docker Hub
    needs: [Veracode_PipelineScan, Veracode_IaC]
    runs-on: ubuntu-22.04
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}:latest

      - name: Cosign installer
        uses: sigstore/cosign-installer@main

      - name: Write signing key to disk (only needed for `cosign sign --key`)
        run: 'echo "$KEY" > cosign.key'
        shell: bash
        env:
          KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Sign container image with annotations from our environment
        run: |
          cosign sign --yes --key cosign.key \
            -a "repo=${{ github.repository }}" \
            -a "workflow=${{ github.workflow }}" \
            -a "ref=${{ github.sha }}" \
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}:latest
        env:
          COSIGN_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}

  push_to_render:
    name: Deploy to render
    needs: [build, push_to_registry]
    runs-on: ubuntu-22.04
    steps:
      - name: Deploy to production
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
